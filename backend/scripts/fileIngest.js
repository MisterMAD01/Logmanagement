// B:\Coding\Logmanagement\backend\scripts\fileIngest.js
const fs = require("fs");
const path = require("path");
const readline = require("readline");
const client = require("../config/config"); // OpenSearch client
const { normalizeLog } = require("../ingest/ingestion"); // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô normalize log

const INDEX_NAME = "logs";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ingest log 1 entry
async function ingestLine(line) {
  let parsed;
  try {
    parsed = JSON.parse(line); // ‡∏•‡∏≠‡∏á parse ‡πÄ‡∏õ‡πá‡∏ô JSON
  } catch {
    parsed = { raw: line }; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON
  }

  const normalized = normalizeLog(parsed);

  try {
    await client.index({
      index: INDEX_NAME,
      body: normalized,
    });
    console.log("‚úÖ Log ingested:", normalized);
  } catch (err) {
    console.error("‚ùå Failed to ingest log:", err.message);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ingest ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (merge policy/continuation)
async function ingestFile(filePath) {
  console.log("üìÇ Ingesting file:", filePath);

  const rl = readline.createInterface({
    input: fs.createReadStream(filePath),
    crlfDelay: Infinity,
  });

  let currentLog = "";

  for await (const line of rl) {
    if (!line.trim()) continue;

    if (line.startsWith("<") || line.startsWith("{")) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà JSON ‡∏´‡∏£‡∏∑‡∏≠ syslog timestamp ‡πÄ‡∏£‡∏¥‡πà‡∏° log ‡πÉ‡∏´‡∏°‡πà
      if (currentLog) {
        await ingestLine(currentLog);
      }
      currentLog = line;
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î policy ‡∏´‡∏£‡∏∑‡∏≠ continuation ‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö log ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      currentLog += " " + line.trim();
    }
  }

  // ingest log ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  if (currentLog) {
    await ingestLine(currentLog);
  }

  console.log("üéâ File ingestion completed:", filePath);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ingest ‡∏à‡∏≤‡∏Å string (‡∏à‡∏≤‡∏Å frontend)
async function ingestFromString(logString) {
  console.log("üìÇ Ingesting from string input");
  const lines = logString
    .split("\n")
    .map((l) => l.trim())
    .filter(Boolean);

  let currentLog = "";

  for (const line of lines) {
    if (line.startsWith("<") || line.startsWith("{")) {
      if (currentLog) await ingestLine(currentLog);
      currentLog = line;
    } else {
      currentLog += " " + line;
    }
  }

  if (currentLog) await ingestLine(currentLog);

  console.log("üéâ String ingestion completed");
}

// main runner (‡∏£‡∏±‡∏ö argument ‡πÄ‡∏õ‡πá‡∏ô path ‡∏´‡∏£‡∏∑‡∏≠ string)
async function main() {
  const arg = process.argv[2];

  if (!arg) {
    console.error(
      "‚ùå Usage: node fileIngest.js <path-to-log-file | log-string>"
    );
    process.exit(1);
  }

  if (fs.existsSync(arg)) {
    const absPath = path.resolve(arg);
    await ingestFile(absPath);
  } else {
    // treat as string log
    await ingestFromString(arg);
  }
}

main().catch((err) => {
  console.error("üö® Unexpected error:", err);
  process.exit(1);
});

module.exports = { ingestFile, ingestFromString };
